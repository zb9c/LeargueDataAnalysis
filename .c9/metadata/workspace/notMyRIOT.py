{"changed":true,"filter":false,"title":"notMyRIOT.py","tooltip":"/notMyRIOT.py","value":"import requests\nimport json\nimport io\ntry:\n    to_unicode = unicode\nexcept NameError:\n    to_unicode = str\nimport xlsxwriter\nimport time\n\ndef getID(sumName):\n    URL = \"https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/\" + sumName + \"?api_key=\" + APIKey\n    response = requests.get(URL).json()\n    ids = response['accountId']\n    ids = str(ids)\n    return ids\ndef getMatches(id):\n    url = \"https://na1.api.riotgames.com/lol/match/v3/matchlists/by-account/\" + id + \"?champion=16\" + \"&api_key=\" + APIKey  #Used to get Soraka Games\n    #url = \"https://na1.api.riotgames.com/lol/match/v3/matchlists/by-account/\" + id + \"?api_key=\" + APIKey\n    response = requests.get(url).json()\n    return response\ndef matchInfo(matchID):\n    url = \"https://na1.api.riotgames.com/lol/match/v3/matches/\" + matchID + \"?api_key=\" + APIKey\n    response = requests.get(url).json()\n    #print url\n    return response\n\nAPIKey = \"RGAPI-735c8023-0382-41c9-89e5-a608e910533f\"\ngameIds = []\nWins = []\ndragons = []\nwardsPurchased = []\n\nwho = 'CheekyBastard'\nmatches = getMatches(str(getID(who)))\n\n#'clean' out matches array before saving it\nfor x in range(len(matches[\"matches\"])):\n    \n    gameIds.append(matches[\"matches\"][x][\"gameId\"])\n    \n    del matches[\"matches\"][x][\"queue\"]\n    del matches[\"matches\"][x][\"season\"]\n    del matches[\"matches\"][x][\"role\"]\n    del matches[\"matches\"][x][\"timestamp\"]\n    del matches[\"matches\"][x][\"lane\"]\n    del matches[\"matches\"][x][\"platformId\"]\n    \n#Save matches as WHO.json using the matches \nwith io.open( who + '.json', 'w', encoding='utf8') as outfile:\n    str_ = json.dumps(matches,\n                      indent=4, sort_keys=True,\n                      separators=(',', ': '), ensure_ascii=True)\n    outfile.write(to_unicode(str_))\n\n#Saves all matches as 0-99.json after cleaning them\nfor x in range(len(matches[\"matches\"])):\n    time.sleep(2)\n    \n    #Pulls the data from Riot API\n    match = matchInfo(str(gameIds[x]))\n    \n    #Clean data pulled from RiotAPI\n    del match['platformId']\n    del match['gameCreation']\n    del match['gameDuration']\n    del match['gameType']\n    del match['gameVersion']\n    del match['seasonId']\n    \n    \n    \n    \n    #Saves response as json file\n    with io.open(str(x) + who + '.json', 'w', encoding='utf8') as outfile:\n        str_ = json.dumps(match,\n                      indent=4, sort_keys=True,\n                      separators=(',', ': '), ensure_ascii=False)\n        outfile.write(to_unicode(str_))\n\n#Using that json we need to create a csv file that saves all that data\n","undoManager":{"mark":0,"position":-1,"stack":[[{"start":{"row":27,"column":10},"end":{"row":27,"column":52},"action":"remove","lines":["RGAPI-735c8023-0382-41c9-89e5-a608e910533f"],"id":1}]]},"ace":{"folds":[{"start":{"row":3,"column":4},"end":{"row":4,"column":24},"placeholder":"..."},{"start":{"row":5,"column":17},"end":{"row":6,"column":20},"placeholder":"..."},{"start":{"row":10,"column":19},"end":{"row":15,"column":14},"placeholder":"..."},{"start":{"row":16,"column":19},"end":{"row":20,"column":19},"placeholder":"..."},{"start":{"row":21,"column":23},"end":{"row":25,"column":19},"placeholder":"..."},{"start":{"row":37,"column":40},"end":{"row":46,"column":43},"placeholder":"..."},{"start":{"row":49,"column":62},"end":{"row":53,"column":35},"placeholder":"..."},{"start":{"row":56,"column":40},"end":{"row":78,"column":39},"placeholder":"..."}],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":9,"column":0},"end":{"row":9,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":25,"state":"start","mode":"ace/mode/python"}},"timestamp":1505603879000}